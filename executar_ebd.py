#!/usr/bin/env python3
"""
Sistema EBD - Script de Execu√ß√£o Principal
Facilita a execu√ß√£o do processamento PDF com integra√ß√£o Supabase
"""

import sys
import os
from pathlib import Path

# Adicionar pasta do projeto ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.ebd_config import EBDConfig, get_config
from scripts.ebd_pdf_integration import EBDPDFProcessor


def mostrar_ajuda():
    """Mostra ajuda de uso"""
    print("""
üöÄ SISTEMA EBD - PROCESSAMENTO PDF INTEGRADO

USO B√ÅSICO:
  python executar_ebd.py

USO AVAN√áADO:
  python executar_ebd.py --usuario pastor@icm.com --pdf arquivo.pdf
  python executar_ebd.py --pasta "C:\\Minha\\Pasta" --no-save
  python executar_ebd.py --config

PAR√ÇMETROS:
  --usuario EMAIL      Email do usu√°rio para autentica√ß√£o (padr√£o: pastor@icm.com)
  --pdf ARQUIVO        Caminho espec√≠fico para PDF
  --pasta CAMINHO      Pasta para busca autom√°tica de PDF
  --no-save           N√£o salvar no banco (apenas processar)
  --config            Mostrar configura√ß√£o atual
  --help              Mostrar esta ajuda

EXEMPLOS:
  # Processamento autom√°tico (busca PDF na pasta padr√£o)
  python executar_ebd.py
  
  # Usar PDF espec√≠fico
  python executar_ebd.py --pdf "C:\\Downloads\\questionario_semana25.pdf"
  
  # Processar sem salvar no banco
  python executar_ebd.py --no-save
  
  # Usar usu√°rio diferente
  python executar_ebd.py --usuario admin@sistema.com

CONFIGURA√á√ÉO:
  1. Crie arquivo .env com suas credenciais Supabase
  2. Configure PASTA_AUTOMACOES se necess√°rio
  3. Execute: python executar_ebd.py --config (para validar)

DEPEND√äNCIAS:
  pip install -r requirements.txt
""")


def main():
    """Fun√ß√£o principal simplificada"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Sistema EBD - Processamento PDF Integrado',
        add_help=False
    )
    
    parser.add_argument('--usuario', default='pastor@icm.com',
                       help='Email do usu√°rio para autentica√ß√£o')
    parser.add_argument('--pdf', help='Caminho para arquivo PDF espec√≠fico')
    parser.add_argument('--pasta', help='Pasta para busca autom√°tica')
    parser.add_argument('--no-save', action='store_true',
                       help='N√£o salvar no banco (apenas processar)')
    parser.add_argument('--config', action='store_true',
                       help='Mostrar configura√ß√£o atual')
    parser.add_argument('--help', action='store_true',
                       help='Mostrar ajuda')
    parser.add_argument('--ambiente', default='producao',
                       choices=['producao', 'desenvolvimento', 'teste'],
                       help='Ambiente de execu√ß√£o')
    
    args = parser.parse_args()
    
    # Mostrar ajuda
    if args.help:
        mostrar_ajuda()
        return 0
    
    # Carregar configura√ß√£o
    config_class = get_config(args.ambiente)
    config = config_class()
    
    # Mostrar configura√ß√£o
    if args.config:
        config.mostrar_configuracao()
        if config.validar_configuracao():
            print("\n‚úÖ Sistema pronto para uso!")
        else:
            print("\n‚ùå Configure as vari√°veis de ambiente antes de usar")
            return 1
        return 0
    
    # Validar configura√ß√£o
    if not config.validar_configuracao():
        print("\n‚ùå Configura√ß√£o inv√°lida. Use --config para verificar")
        return 1
    
    print("=" * 70)
    print("üöÄ SISTEMA EBD - PROCESSAMENTO PDF INTEGRADO")
    print("=" * 70)
    
    try:
        # Inicializar processador
        processor = EBDPDFProcessor(config.SUPABASE_URL, config.SUPABASE_SERVICE_KEY)
        
        # Definir PDF
        pdf_path = args.pdf
        pasta_busca = args.pasta or config.PASTA_AUTOMACOES
        
        if not pdf_path:
            print(f"üîç Buscando PDF em: {pasta_busca}")
            pdf_path = processor.buscar_pdf_automatico(pasta_busca)
            
        if not pdf_path:
            print("‚ùå PDF n√£o encontrado!")
            print(f"üìÅ Verifique se h√° arquivos PDF em: {pasta_busca}")
            return 1
        
        # Verificar se arquivo existe
        if not os.path.exists(pdf_path):
            print(f"‚ùå Arquivo n√£o encontrado: {pdf_path}")
            return 1
        
        # Mostrar informa√ß√µes
        print(f"üìÑ PDF: {os.path.basename(pdf_path)}")
        print(f"üë§ Usu√°rio: {args.usuario}")
        print(f"üíæ Salvar no banco: {'N√£o' if args.no_save else 'Sim'}")
        print(f"üåç Ambiente: {args.ambiente}")
        
        # Confirmar execu√ß√£o
        if args.ambiente == 'producao':
            resposta = input("\n‚ùì Continuar com o processamento? [S/n]: ")
            if resposta.lower() in ['n', 'no', 'n√£o']:
                print("‚ùå Processamento cancelado pelo usu√°rio")
                return 0
        
        print("\nüöÄ Iniciando processamento...")
        
        # Processar
        resultado = processor.processar_pdf_completo(
            pdf_path, 
            args.usuario, 
            salvar_no_banco=not args.no_save
        )
        
        # Gerar relat√≥rio
        processor.gerar_relatorio_final()
        
        # Salvar resultado em arquivo local (opcional)
        if resultado.get('salvo_banco'):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            arquivo_resultado = f"resultado_processamento_{timestamp}.json"
            
            # Preparar dados para JSON
            resultado_json = {
                'arquivo_processado': resultado['arquivo_processado'],
                'total_perguntas': resultado['total_perguntas'],
                'total_membros': resultado['total_membros'],
                'questionario_id': resultado.get('questionario_id'),
                'timestamp': timestamp,
                'usuario': args.usuario,
                'status': resultado['status']
            }
            
            import json
            with open(arquivo_resultado, 'w', encoding='utf-8') as f:
                json.dump(resultado_json, f, indent=2, ensure_ascii=False)
            
            print(f"üìÅ Resultado salvo em: {arquivo_resultado}")
        
        print("\nüéâ PROCESSAMENTO CONCLU√çDO COM SUCESSO!")
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå Processamento interrompido pelo usu√°rio")
        return 130
        
    except Exception as e:
        print(f"\n‚ùå ERRO FATAL: {str(e)}")
        
        # Log detalhado em modo debug
        if config.DEBUG:
            import traceback
            print("\nüîç STACK TRACE:")
            traceback.print_exc()
        
        return 1


if __name__ == "__main__":
    # Importa√ß√µes que podem falhar
    try:
        from datetime import datetime
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üì¶ Execute: pip install -r requirements.txt")
        sys.exit(1)
    
    # Verificar Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        sys.exit(1)
    
    sys.exit(main())
